---
layout:     post
title:      "C++基础(一)"
subtitle:   " \"Hello World, Hello C++\""
date:       2016-10-09 12:00:00
author:     "Edtion"
catalog: true
tags:
    - C++语法
---

> 转自：[极客学院C++基础教程][1] 修改部分汉语逻辑（极客学院能翻译成中文并免费开放已经做的很棒了，不要要求太多）

- 对于 C++ ，不想说太多，不了解的网上搜一下什么都会清楚，写这个博客只为方便自己学习记录使用


# 开发环境
## 本地开发环境设置

如果你想要在本地有 C++ 开发环境，应该确保你已经安装了以下两个软件：

### 文本编辑器

文本编辑器用来编写程序。举几个编辑器的例子： Windows 的 NotePad，一些操作系统提供的 Edit 命令，Brief，Epsilon，EMACS，和 vim 或者 vi。

文本编辑器的名称和版本在不同的操作系统上可能有差异。例如，Windows 操作系统上可用 NotePad，在 Windows 和 Linux 或者 UNIX 上均可以使用 vim 或者 vi。

你用编辑器创建的文件称为源文件，对于 C++ 而言，这些文件的很明显都是用 .cpp，.cp，或者 .c 为扩展名(后缀名)。

在开始编程之前，请确保你有一个文本编辑器可用，并且你有足够的经验编写 C++ 程序。

### C++ 编译器

C++ 编译器的作用是编译你的源代码，最终将它转换成可执行程序。

大多数 C++ 编译器并不在意你的源代码文件的扩展名，如果你没有指定它的扩展名，许多编译器都会用 .cpp 作为文件的默认扩展名。

最常用并且免费的编译器是 GNU C/C++ 编译器，另外如果你有其他的操作系统，你也可以使用 HP 或者 Solaris 的编译器。

### Installing GNU C/C++ 编译器

#### UNIX/Linux 安装

如果你使用 Linux 或者 UNIX 系统，通过在命令行中输入如下的命令检查你的系统是否已经安装了 GCC：

```
    $ g++ -v
```

如果已经安装了 GCC， 那么在控制台中应该输出类似如下的信息：

```
    Using built-in specs.
    Target: i386-redhat-linux
    Configured with: ../configure --prefix=/usr .......
    Thread model: posix
    gcc version 4.1.2 20080704 (Red Hat 4.1.2-46)
```

如果 GCC 没有安装，那么你需要自己手动安装，你可以从 [gcc.gnu.org/install](http://gcc.gnu.org/install/) 这里获得更详细的说明。

#### Mac OS X 安装

如果你使用 Mac OS X 系统，那么得到 GCC 最方便的方式是从苹果的网站上下载 Xcode 开发环境， 按照如下的链接中的说明进行安装。

Xcode 现在可用的链接是： [developer.apple.com/technologies/tools](http://developer.apple.com/technologies/tools/)

#### Windows 安装

为了在 Windows 上安装 GCC， 你需要安装 MinGW。为了安装 MinGW，你可以访问 MinGW 的主页 [www.mingw.org](http://www.mingw.org)

接着访问 MinGW 下载页那个链接。下载最新版的 MinGW 安装程序，这个程序的名称应该是类似于 `MinGW-<版本号>.exe` 这样的形式。

在安装 MinGW 的时候，最低限度，你必须要安装 gcc-core，gcc-g++，binutils，和 MinGW 运行时环境，当然你也可以选择更多进行安装。

添加你安装 MinGW 的子目录 bin 的路径到你的 **PATH** 环境变量中，这样你就可以通过在命令行中输入 MinGW 提供的工具的名称来使用这些工具。

当安装完成之后，你可以在 Windows 的命令行中运行 GNU 提供的几个工具，类似于：gcc，g++，ar，ranlib，dlltool 等。

> ps：Mac OS下用xcode创建C++文件：在xcode界面用快捷键cmd+shift+n 选择创建Command Line Tool工程 在下一步的Language选项选择C++ 确定即可


# 基本语法

C++ 程序,它可以被定义为一个对象集合，彼此之间通过调用对方的方法进行通信。现在让我们简要地看看类，对象，方法和实例变量的意思。

- 对象： 对象具有状态和行为。例子:一只狗拥有的状态——颜色、名称、品种以及行为——摇尾巴,吠叫,吃。对象是类的一个实例。
- 类：一个类可以定义为一个模板/复写纸，它描述的是它所支持类型对象的行为或者状态。
- 方法：一个方法基本上是一个行为。一个类可以包含许多方法。在这些方法中，你可以编写你的业务逻辑代码，你可以进行数据操作。
- 实例变量：每个对象都有其独特的实例变量集合。通过给这些实例变量进行赋值，从而这个对象的状态被创建了。

### 程序结构
首先让我们看一个简单的示例代码，这个程序会输出 Hello World。

    #include <iostream>
    using namespace std;

    // main() is where program execution begins.

    int main()
    {
        cout << "Hello World"; // prints Hello World
        return 0;
    }
    
让我们来看下以上程序的各个部分：
- C++ 语言定义了几个头，其中包含的信息对你的程序要么是必要的或要么是有用的。对于这个程序,头部 `<iostream>`是必要的。
- `using namespace std;` 这一行告诉编译器使用 std 命名空间。命名空间是 C++ 中一个相对较新的特性。
- 下一行 //main() is where program execution begins 是一个在 C++ 可以用来表示注释的语句。单行可以使用 // 进行单行注释。
- `int main()` 这一行是程序的主方法，也是程序执行的入口。
- 下一行 `cout << "Hello World" `会将 `”Hello World”` 显示在屏幕上。
- 下一行 return 0; 会终止 main() 函数的执行，并将 0 返回给调用进程。

### 编译和执行 C++ 程序
接着让我们看看如何保存源文件，编译和执行程序。请按照如下的步骤执行：

- 打开一个文本编辑器，添加上面的代码；
- 保存该文件，并以 hello.cpp 为该文件名;
- 打开一个命令行程序，接着cd到你保存 hello.cpp 这个文件的目录；
- 在命令行中输入 g++ hello.cpp，接着按下回车按键，编译你的程序。如果你的代码中没有错误，在命令行控制窗口中提示符将会跳转到下一行，并将生成一个 a.out 的可执行文件。
- 接着，输入 ./a.out 来运行你的程序；
- 你将会在你当前的窗口中看到输出 Hello World。

```
$ g++ hello.cpp
$ ./a.out
Hello World
```

确保你的目录路径包含文件 hello.cpp 再用 g++ 运行它。

你可以使用 makefile 编译 C/C++ 程序。

### C++ 中的分号和语句块
在 C++ 中分号是终止符。也就是说，每一个独立语句都必须以分号结束。它表明了一个逻辑实体的结束。

例如，如下是三个不同的语句：

    x = y;
    y = y+1;
    add(x, y);
    
一个语句块是一组逻辑上连接的语句，它们被左右花括号包围住。例如：

```
    {
        cout << "Hello World"; // prints Hello World
        return 0;
    }
```
  
C++ 并不是把一行的结束作为一个终结符。由于这个原因，它也就不在意你在一行中哪里放置你的语句。例如：

    x = y;
    y = y+1;
    add(x, y);
    
这个也等同于：

```
x = y; y = y+1; add(x, y);
```

### C++ 标识符
一个 C++ 标识符是用来标识一个变量、函数、类、模块，或任何其他用户定义的项目。一个标识符以字母 A 到 Z 或者 a 到 z 或下划线`_`开始，接着后面是零个或多个字母，下划线，数字(0 - 9)。

C++ 不允许用一些特殊符号作为标识符，如`@、 $、%`。C++是一种区分大小写的编程语言。因此，`Manpower`和 `manpower` 在 C++ 中是两个不同的标识符。

如下是一些合法的标识符的例子：

```
	mohd       zara    abc   move_name  a_123
   myname50   _temp   j     a23b9      retVal
```

### C++ 关键字
如下的列表展示了 C++ 中的关键字。这些关键字不能用作常量或变量或其他标识符的名称。

| asm         |else      |new              |this     |
| :------     |:------   |:------          |:------  |
| auto        |enum      |operator         |throw    |
| bool        |explicit  |private          |true     |
| break       |export    |protected        |try      |
| case        |extern    |public           |typedef  |
| catch       |false     |register         |typeid   |
| char        |float     |reinterpret_cast |typename |
| class       |for       |return           |union    |
| const       |friend    |short            |unsigned |
| const_cast  |goto      |signed           |using    |
| continue    |if        |sizeof           |virtual  |
| default	    |inline    |static           |void     |
| delete	    |int       |static_cast      |volatile |
| do          |long	     |struct           |wchar_t  |
| double	    |mutable   |switch           |while    |
| dynamic_cast|namespace |template         |         |

### 三元符
有些字符有其他的表示含义，称为三元字符序列。三元字符是由三个字符组成，它表示一个字符序列并且该序列总是以两个问号开始。

三元符在任何地方出现时都会被转义，包括在字符串字面值和字符字面值，注释，和预处理器指令中。

以下是最常用的三元符序列:

| Trigraph| Replacement|
| :-------| :---       |
| ??=     | #          |
| ??/     | \          |
| ??'     | ^          |
| ??(     | [          |
| ??)     | ]          |
| ??!     | \|         |
| ??<     | {          |
| ??>     | }          |
| ??-     | ~          |

- 所有的编译器不支持三元符，也不建议使用，因为它们很容易让人混淆。

### C++ 中的空格
只包含空格，可能有注释的行被称为一个空行，并且 C++ 编译器会完全忽略它。

空格是 C++ 中使用的术语来描述空格、制表符、换行符和注释。空格将一部分注释与其他的部分分隔开，从而使编译器能够识别一个元素在语句中的位置，例如 int 的结束，和下一个元素的开始位置。因此，在下面的语句中，

```
    int age;
```

在 int 和 age 之间必须有至少一个空格字符(通常是一个空格)，这样编译器才能够区分它们。另一方面，在如下语句中

```
    fruit = apples + oranges: //Get the total fruit
```

在 fruit 和 = 之间，或者 = 和 apples 之间是不需要空格的，尽管这样做不会有什么影响。如果为了使程序阅读起来更方便，你可以在它们之间添加空格。

# 注释

程序注释是说明性语句，可以在你编写的 C++ 代码中添加注释，从而帮助任何人阅读源代码。所有的编程语言都支持某种形式的注释。

C++ 支持单行和多行注释。在注释中可以使用所有的字符，并且它们都将会被 C++ 编译器忽略。

C++ 注释以`/*`开始和以`*/`结束。例如:

```
    /* This is a comment */

    /* C++ comments can  also
    * span multiple lines
    */
```
    
注释还可以以 `//` 开始，一直到行的结束位置。例如:

```
    #include <iostream>
    using namespace std;

    main()
    {
        cout << "Hello World"; // prints Hello World

        return 0;
    }
```

上面的代码编译时,将忽略 *//prints Hello World*，最终可执行程序将产生以下结果:

```
    Hello World
```

`/*` 和 `*/` 注释，`//` 字符没有特殊的意义。在 `//` 注释的内部，`/*` 和 `*/` 没有特殊的意义。因此，您可以在在一种注释中嵌套另外一种注释。例如：

```
    /* Comment out printing of Hello World:
    cout << "Hello World"; // prints Hello World
    */
```

[1]: http://wiki.jikexueyuan.com/project/cplusplus/environment.html
